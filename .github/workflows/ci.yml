name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.12"]
        os: [ubuntu-latest]
        # Optionally test on multiple OS
        # os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
    
    - name: Verify project structure
      run: |
        echo "Project structure:"
        find . -type f -name "*.py" | head -20
        echo "Test files:"
        find tests/ -name "*.py" 2>/dev/null || echo "No tests directory found"
    
    - name: Run tests
      run: |
        python -m pytest tests/ -v --tb=short
    
    - name: Generate coverage report
      if: matrix.python-version == '3.11'
      run: |
        python -m pytest tests/ --cov=auto_registration_system --cov=data_handler --cov=string_parser --cov=telegram_adapter --cov-report=xml --cov-report=term-missing
    
    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 isort
    
    # - name: Check code formatting with Black
    #   run: |
    #     black --check --diff . || (echo "Code formatting issues found. Run 'black .' to fix." && exit 1)
    
    # - name: Check import sorting with isort
    #   run: |
    #     isort --check-only --diff . || (echo "Import sorting issues found. Run 'isort .' to fix." && exit 1)
    
    - name: Lint with flake8
      run: |
        # Stop on syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Check for other issues but don't fail the build
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics